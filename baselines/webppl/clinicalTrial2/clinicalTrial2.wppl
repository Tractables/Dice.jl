var controlGroup = [false, false, true, false, false];
var treatedGroup = [true, false, true, true, true];
var pairs = map(function(e, i) { return [e, treatedGroup[i]];}, controlGroup);
var pairs = [[0, 1], [0, 0], [1, 1], [0, 1], [0, 1]];

var model = function() {
    var isEffective = flip(0.5);
    var probIfTreated = beta({a: 1, b:1});
    var probIfControl = (isEffective) ? (beta({a: 1, b: 1})) : (probIfTreated);

    map(
    function(c0, c1) {
        //var c0 = pair[0];
        //var c1 = pair[1];
        //var cgf = bernoulli({p: probIfControl});
        if (c0 == 1) {
            condition(flip(probIfControl) == true);
        } else {
            condition(flip(probIfControl) == false);
        };

        if (c1 == 1) {
            condition(flip(probIfTreated) == true);
        } else {
            condition(flip(probIfTreated) == false);
        };
        
        
        //var tgf = bernoulli({p: probIfTreated});
        //condition(flip(probIfTreated) == c1);
        //observe(c1 ? tgf : !tgf);
    },
    pairs);

    //condition(isEffective == true);
    condition(isEffective == true);

    return (probIfControl);
}

var func1 = function() {
	return Infer({method: argv.m, particles: argv.s, samples: argv.s}, model);
}

timeit( function() { return expectation(func1());})
